"use strict";
/*
 * Copyright (c) Jupyter Development Team.
 * Distributed under the terms of the Modified BSD License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.DebuggerHelper = void 0;
const utils_1 = require("../utils");
const DEBUGGER_ITEM = 'debugger-icon';
/**
 * Debugger Helper
 */
class DebuggerHelper {
    constructor(page, sidebar, notebook) {
        this.page = page;
        this.sidebar = sidebar;
        this.notebook = notebook;
    }
    /**
     * Returns true if debugger toolbar item is enabled, false otherwise
     */
    async isOn() {
        if (!(await this.notebook.isAnyActive())) {
            return false;
        }
        const item = await this.notebook.getToolbarItem(DEBUGGER_ITEM);
        if (item) {
            const button = await item.$('button');
            if (button) {
                return (await button.getAttribute('aria-pressed')) === 'true';
            }
        }
        return false;
    }
    /**
     * Enables the debugger toolbar item
     */
    async switchOn() {
        await (0, utils_1.waitForCondition)(async () => {
            const item = await this.notebook.getToolbarItem(DEBUGGER_ITEM);
            if (item) {
                const button = await item.$('button');
                if (button) {
                    return (await button.getAttribute('aria-disabled')) !== 'true';
                }
            }
            return false;
        }, 2000);
        if (!(await this.isOn())) {
            await this.notebook.clickToolbarItem(DEBUGGER_ITEM);
        }
    }
    /**
     * Disables the debugger toolbar item
     */
    async switchOff() {
        if (await this.isOn()) {
            await this.notebook.clickToolbarItem(DEBUGGER_ITEM);
        }
    }
    /**
     *  Returns true if debugger panel is open, false otherwise
     */
    async isOpen() {
        return await this.sidebar.isTabOpen('jp-debugger-sidebar');
    }
    /**
     * Returns handle to the variables panel content
     */
    async getVariablesPanel() {
        return this._getPanel('.jp-DebuggerVariables');
    }
    /**
     * Waits for variables to be populated in the variables panel
     */
    async waitForVariables() {
        await this.page.waitForSelector('.jp-DebuggerVariables-body ul');
    }
    /**
     * render variable
     */
    async renderVariable(name) {
        await this.page
            .locator(`.jp-DebuggerVariables :text("${name}")`)
            .click({ button: 'right' });
        await this.page
            .locator('.lm-Menu-itemLabel:text("Render Variable")')
            .click();
        await this.page.waitForSelector('.jp-VariableRendererPanel-renderer');
    }
    /**
     * Returns handle to callstack panel content
     */
    async getCallStackPanel() {
        return this._getPanel('.jp-DebuggerCallstack');
    }
    /**
     * Waits for the callstack body to populate in the callstack panel
     */
    async waitForCallStack() {
        await this.page.waitForSelector('.jp-DebuggerCallstack-body >> .jp-DebuggerCallstackFrame');
    }
    /**
     * Returns handle to breakpoints panel content
     */
    async getBreakPointsPanel() {
        return this._getPanel('.jp-DebuggerBreakpoints');
    }
    /**
     * Waits for the breakpoints to appear in the breakpoints panel
     */
    async waitForBreakPoints() {
        await this.page.waitForSelector('.jp-DebuggerBreakpoints >> .jp-DebuggerBreakpoint');
    }
    /**
     * Returns handle to sources panel content
     */
    async getSourcePanel() {
        return this._getPanel('.jp-DebuggerSources');
    }
    /**
     * Waits for sources to be populated in the sources panel
     */
    async waitForSources() {
        await this.page.waitForSelector('.jp-DebuggerSources-body >> .jp-Editor', {
            state: 'visible'
        });
    }
    async _getPanel(selector) {
        const panel = await this.sidebar.getContentPanel('right');
        if (panel) {
            return panel.$(selector);
        }
        return null;
    }
}
exports.DebuggerHelper = DebuggerHelper;
//# sourceMappingURL=debuggerpanel.js.map