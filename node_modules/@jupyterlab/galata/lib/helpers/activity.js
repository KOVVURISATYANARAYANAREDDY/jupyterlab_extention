"use strict";
// Copyright (c) Jupyter Development Team.
// Distributed under the terms of the Modified BSD License.
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ActivityHelper = void 0;
const Utils = __importStar(require("../utils"));
/**
 * Activity helper
 */
class ActivityHelper {
    constructor(page) {
        this.page = page;
    }
    /**
     * JupyterLab launcher selector
     *
     * @deprecated You should use locator selector {@link launcher}
     */
    get launcherSelector() {
        return Utils.xpBuildActivityTabSelector('Launcher');
    }
    /**
     * JupyterLab launcher tab
     */
    get launcher() {
        return this.page.getByRole('main').getByRole('tab', { name: 'Launcher' });
    }
    /**
     * Close all widgets in the main area
     */
    async closeAll() {
        await this.page.evaluate(async () => {
            await window.jupyterapp.commands.execute('application:close-all');
        });
        await this.launcher.waitFor();
    }
    /**
     * Whether a tab is active or not
     *
     * @param name Activity name
     * @returns Active status
     */
    async isTabActive(name) {
        var _a;
        if (await Utils.isInSimpleMode(this.page)) {
            const activeTab = await this.page
                .locator('#jp-title-panel-title')
                .getByRole('textbox')
                .inputValue();
            return activeTab === name;
        }
        else {
            const tab = await this.getTab(name);
            return ((_a = (tab &&
                (await tab.evaluate((tab) => tab.classList.contains('jp-mod-current'))))) !== null && _a !== void 0 ? _a : false);
        }
    }
    /**
     * Get a handle on a tab
     *
     * @param name Activity name
     * @returns Handle on the tab or null if the tab is not found
     */
    getTab(name) {
        return this.getTabLocator(name).elementHandle();
    }
    /**
     * Get a tab locator
     * @param name Activity name
     * @returns Tab locator
     */
    getTabLocator(name) {
        return name
            ? this.page.getByRole('main').getByRole('tab', { name })
            : this.page.getByRole('main').locator('.jp-mod-current[role="tab"]');
    }
    /**
     * Get a handle on a panel
     *
     * @param name Activity name
     * @returns Handle on the tab or null if the tab is not found
     */
    async getPanel(name) {
        const page = this.page;
        let locator;
        if (name) {
            locator = page.getByRole('main').getByRole('tabpanel', { name });
        }
        else {
            const activeTab = await this.getTab();
            const id = await (activeTab === null || activeTab === void 0 ? void 0 : activeTab.evaluate((tab) => tab.getAttribute('data-id')));
            if (!id) {
                return null;
            }
            locator = page.getByRole('main').locator(`[role="tabpanel"][id="${id}"]`);
        }
        return locator.elementHandle();
    }
    /**
     * Get a panel locator
     *
     * @param name Activity name
     * @returns Panel locator or null
     */
    async getPanelLocator(name) {
        let locator;
        if (name) {
            locator = this.page.getByRole('main').getByRole('tabpanel', { name });
        }
        else {
            const id = await this.getTabLocator().getAttribute('data-id');
            if (!id) {
                return null;
            }
            locator = this.page
                .getByRole('main')
                .locator(`[role="tabpanel"][id="${id}"]`);
        }
        return locator;
    }
    /**
     * Close a panel from its tab name
     *
     * @param name Activity name
     */
    async closePanel(name) {
        await this.activateTab(name);
        await this.page.evaluate(async () => {
            await window.jupyterapp.commands.execute('application:close');
        });
        await this.launcher.waitFor();
    }
    /**
     * Activate a tab is active
     *
     * @param name Activity name
     * @returns Whether the action is successful
     */
    async activateTab(name) {
        const tab = await this.getTab(name);
        if (tab) {
            await tab.click();
            await this.page.waitForFunction(({ tab }) => {
                return tab.ariaSelected === 'true';
            }, { tab });
            return true;
        }
        return false;
    }
}
exports.ActivityHelper = ActivityHelper;
//# sourceMappingURL=activity.js.map